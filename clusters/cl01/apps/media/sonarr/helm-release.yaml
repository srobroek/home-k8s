---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sonarr
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: sonarr
      version: 16.1.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    env:
      TZ: "${TZ}"
    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "television-box"

          traefik.ingress.kubernetes.io/router.middlewares: "networking-external-auth@kubernetescrd" 
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"    

          cert-manager.io/cluster-issuer: letsencrypt-production
          kubernetes.io/tls-acme: "true"
          
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "home.${SECRET_DOMAIN}"         
            
        hosts:
          - host: "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "sonarr.${SECRET_DOMAIN}"
            secretName: "sonarr.${SECRET_DOMAIN/./-}-tls"           
    podSecurityContext:
      supplementalGroups:
        - 100
    # metrics:
    #   enabled: true
    #   serviceMonitor:
    #     interval: 3m
    #     scrapeTimeout: 1m
    #   prometheusRule:
    #     enabled: true
    #   exporter:
    #     image:
    #       repository: ghcr.io/onedr0p/exportarr
    #       tag: v0.6.1
    #     env:
    #       port: 9794
    #       additionalMetrics: true
    #       unknownQueueItems: false
    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config-v1
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDR}"
            path: "${NAS_MEDIA_PATH}"
        mountPath: /media
    # podAnnotations:
    #   backup.velero.io/backup-volumes: config
    #   pre.hook.backup.velero.io/container: fsfreeze
    #   pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/config"]'
    #   post.hook.backup.velero.io/container: fsfreeze
    #   post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/config"]'
    resources:
      requests:
        memory: 250Mi
        cpu: 500m
      limits:
        memory: 1500Mi
    # additionalContainers:
    #   fsfreeze:
    #     name: fsfreeze
    #     image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
    #     volumeMounts:
    #       - name: config
    #         mountPath: /config
    #     securityContext:
    #       privileged: true
